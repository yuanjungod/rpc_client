#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Action:
  VIEW = 0
  BUY = 1
  COLLECTION = 2
  REMOVE_COLLECTION = 3
  CART = 4
  REMOVE_CART = 5

  _VALUES_TO_NAMES = {
    0: "VIEW",
    1: "BUY",
    2: "COLLECTION",
    3: "REMOVE_COLLECTION",
    4: "CART",
    5: "REMOVE_CART",
  }

  _NAMES_TO_VALUES = {
    "VIEW": 0,
    "BUY": 1,
    "COLLECTION": 2,
    "REMOVE_COLLECTION": 3,
    "CART": 4,
    "REMOVE_CART": 5,
  }


class LocationT:
  """
  Attributes:
   - latitude
   - longtitude
   - province
   - city
  """

  thrift_spec = (
    None, # 0
    (1, TType.DOUBLE, 'latitude', None, None, ), # 1
    (2, TType.DOUBLE, 'longtitude', None, None, ), # 2
    (3, TType.STRING, 'province', None, None, ), # 3
    (4, TType.STRING, 'city', None, None, ), # 4
  )

  def __init__(self, latitude=None, longtitude=None, province=None, city=None,):
    self.latitude = latitude
    self.longtitude = longtitude
    self.province = province
    self.city = city

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.DOUBLE:
          self.latitude = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.longtitude = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.province = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.city = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('LocationT')
    if self.latitude is not None:
      oprot.writeFieldBegin('latitude', TType.DOUBLE, 1)
      oprot.writeDouble(self.latitude)
      oprot.writeFieldEnd()
    if self.longtitude is not None:
      oprot.writeFieldBegin('longtitude', TType.DOUBLE, 2)
      oprot.writeDouble(self.longtitude)
      oprot.writeFieldEnd()
    if self.province is not None:
      oprot.writeFieldBegin('province', TType.STRING, 3)
      oprot.writeString(self.province)
      oprot.writeFieldEnd()
    if self.city is not None:
      oprot.writeFieldBegin('city', TType.STRING, 4)
      oprot.writeString(self.city)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.latitude)
    value = (value * 31) ^ hash(self.longtitude)
    value = (value * 31) ^ hash(self.province)
    value = (value * 31) ^ hash(self.city)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class BehaviorT:
  """
  Attributes:
   - action
   - timestamp
   - times
   - duration
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'action', None, None, ), # 1
    (2, TType.I64, 'timestamp', None, None, ), # 2
    (3, TType.I32, 'times', None, None, ), # 3
    (4, TType.I32, 'duration', None, None, ), # 4
  )

  def __init__(self, action=None, timestamp=None, times=None, duration=None,):
    self.action = action
    self.timestamp = timestamp
    self.times = times
    self.duration = duration

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.action = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.timestamp = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.times = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.duration = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('BehaviorT')
    if self.action is not None:
      oprot.writeFieldBegin('action', TType.I32, 1)
      oprot.writeI32(self.action)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I64, 2)
      oprot.writeI64(self.timestamp)
      oprot.writeFieldEnd()
    if self.times is not None:
      oprot.writeFieldBegin('times', TType.I32, 3)
      oprot.writeI32(self.times)
      oprot.writeFieldEnd()
    if self.duration is not None:
      oprot.writeFieldBegin('duration', TType.I32, 4)
      oprot.writeI32(self.duration)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.action is None:
      raise TProtocol.TProtocolException(message='Required field action is unset!')
    if self.timestamp is None:
      raise TProtocol.TProtocolException(message='Required field timestamp is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.action)
    value = (value * 31) ^ hash(self.timestamp)
    value = (value * 31) ^ hash(self.times)
    value = (value * 31) ^ hash(self.duration)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserProfileT:
  """
  Attributes:
   - id
   - userName
   - registerTime
   - birthday
   - phone
   - email
   - weixin
   - weibo
   - constellation
   - device
   - birthRecord
   - age
   - sex
   - shoppingAbility
   - tagFitSex
   - tagFitAge
   - tagFitScenario
   - tagFitMaterial
   - tagFitDesignStyle
   - tagFitTarget
   - tagFitPackage
   - tagList
   - haveMate
   - haveChild
   - testServer
   - updateTime
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'id', None, None, ), # 1
    (2, TType.STRING, 'userName', None, None, ), # 2
    (3, TType.I64, 'registerTime', None, None, ), # 3
    (4, TType.I64, 'birthday', None, None, ), # 4
    (5, TType.STRING, 'phone', None, None, ), # 5
    (6, TType.STRING, 'email', None, None, ), # 6
    (7, TType.STRING, 'weixin', None, None, ), # 7
    (8, TType.STRING, 'weibo', None, None, ), # 8
    (9, TType.STRING, 'constellation', None, None, ), # 9
    (10, TType.STRING, 'device', None, None, ), # 10
    (11, TType.I32, 'birthRecord', None, None, ), # 11
    (12, TType.I32, 'age', None, None, ), # 12
    (13, TType.STRING, 'sex', None, None, ), # 13
    (14, TType.I32, 'shoppingAbility', None, None, ), # 14
    (15, TType.LIST, 'tagFitSex', (TType.STRING,None), None, ), # 15
    (16, TType.LIST, 'tagFitAge', (TType.LIST,(TType.I32,None)), None, ), # 16
    (17, TType.LIST, 'tagFitScenario', (TType.STRING,None), None, ), # 17
    (18, TType.LIST, 'tagFitMaterial', (TType.STRING,None), None, ), # 18
    (19, TType.LIST, 'tagFitDesignStyle', (TType.STRING,None), None, ), # 19
    (20, TType.LIST, 'tagFitTarget', (TType.STRING,None), None, ), # 20
    (21, TType.LIST, 'tagFitPackage', (TType.STRING,None), None, ), # 21
    (22, TType.LIST, 'tagList', (TType.STRING,None), None, ), # 22
    (23, TType.I32, 'haveMate', None, None, ), # 23
    (24, TType.I32, 'haveChild', None, None, ), # 24
    (25, TType.I32, 'testServer', None, None, ), # 25
    (26, TType.I64, 'updateTime', None, None, ), # 26
  )

  def __init__(self, id=None, userName=None, registerTime=None, birthday=None, phone=None, email=None, weixin=None, weibo=None, constellation=None, device=None, birthRecord=None, age=None, sex=None, shoppingAbility=None, tagFitSex=None, tagFitAge=None, tagFitScenario=None, tagFitMaterial=None, tagFitDesignStyle=None, tagFitTarget=None, tagFitPackage=None, tagList=None, haveMate=None, haveChild=None, testServer=None, updateTime=None,):
    self.id = id
    self.userName = userName
    self.registerTime = registerTime
    self.birthday = birthday
    self.phone = phone
    self.email = email
    self.weixin = weixin
    self.weibo = weibo
    self.constellation = constellation
    self.device = device
    self.birthRecord = birthRecord
    self.age = age
    self.sex = sex
    self.shoppingAbility = shoppingAbility
    self.tagFitSex = tagFitSex
    self.tagFitAge = tagFitAge
    self.tagFitScenario = tagFitScenario
    self.tagFitMaterial = tagFitMaterial
    self.tagFitDesignStyle = tagFitDesignStyle
    self.tagFitTarget = tagFitTarget
    self.tagFitPackage = tagFitPackage
    self.tagList = tagList
    self.haveMate = haveMate
    self.haveChild = haveChild
    self.testServer = testServer
    self.updateTime = updateTime

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.userName = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.registerTime = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.birthday = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.phone = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.email = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.weixin = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.weibo = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.constellation = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.device = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.birthRecord = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.age = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.sex = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I32:
          self.shoppingAbility = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.LIST:
          self.tagFitSex = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readString()
            self.tagFitSex.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.LIST:
          self.tagFitAge = []
          (_etype9, _size6) = iprot.readListBegin()
          for _i10 in xrange(_size6):
            _elem11 = []
            (_etype15, _size12) = iprot.readListBegin()
            for _i16 in xrange(_size12):
              _elem17 = iprot.readI32()
              _elem11.append(_elem17)
            iprot.readListEnd()
            self.tagFitAge.append(_elem11)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.LIST:
          self.tagFitScenario = []
          (_etype21, _size18) = iprot.readListBegin()
          for _i22 in xrange(_size18):
            _elem23 = iprot.readString()
            self.tagFitScenario.append(_elem23)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.LIST:
          self.tagFitMaterial = []
          (_etype27, _size24) = iprot.readListBegin()
          for _i28 in xrange(_size24):
            _elem29 = iprot.readString()
            self.tagFitMaterial.append(_elem29)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.LIST:
          self.tagFitDesignStyle = []
          (_etype33, _size30) = iprot.readListBegin()
          for _i34 in xrange(_size30):
            _elem35 = iprot.readString()
            self.tagFitDesignStyle.append(_elem35)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.LIST:
          self.tagFitTarget = []
          (_etype39, _size36) = iprot.readListBegin()
          for _i40 in xrange(_size36):
            _elem41 = iprot.readString()
            self.tagFitTarget.append(_elem41)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.LIST:
          self.tagFitPackage = []
          (_etype45, _size42) = iprot.readListBegin()
          for _i46 in xrange(_size42):
            _elem47 = iprot.readString()
            self.tagFitPackage.append(_elem47)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.LIST:
          self.tagList = []
          (_etype51, _size48) = iprot.readListBegin()
          for _i52 in xrange(_size48):
            _elem53 = iprot.readString()
            self.tagList.append(_elem53)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.I32:
          self.haveMate = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.I32:
          self.haveChild = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 25:
        if ftype == TType.I32:
          self.testServer = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 26:
        if ftype == TType.I64:
          self.updateTime = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserProfileT')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 1)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    if self.userName is not None:
      oprot.writeFieldBegin('userName', TType.STRING, 2)
      oprot.writeString(self.userName)
      oprot.writeFieldEnd()
    if self.registerTime is not None:
      oprot.writeFieldBegin('registerTime', TType.I64, 3)
      oprot.writeI64(self.registerTime)
      oprot.writeFieldEnd()
    if self.birthday is not None:
      oprot.writeFieldBegin('birthday', TType.I64, 4)
      oprot.writeI64(self.birthday)
      oprot.writeFieldEnd()
    if self.phone is not None:
      oprot.writeFieldBegin('phone', TType.STRING, 5)
      oprot.writeString(self.phone)
      oprot.writeFieldEnd()
    if self.email is not None:
      oprot.writeFieldBegin('email', TType.STRING, 6)
      oprot.writeString(self.email)
      oprot.writeFieldEnd()
    if self.weixin is not None:
      oprot.writeFieldBegin('weixin', TType.STRING, 7)
      oprot.writeString(self.weixin)
      oprot.writeFieldEnd()
    if self.weibo is not None:
      oprot.writeFieldBegin('weibo', TType.STRING, 8)
      oprot.writeString(self.weibo)
      oprot.writeFieldEnd()
    if self.constellation is not None:
      oprot.writeFieldBegin('constellation', TType.STRING, 9)
      oprot.writeString(self.constellation)
      oprot.writeFieldEnd()
    if self.device is not None:
      oprot.writeFieldBegin('device', TType.STRING, 10)
      oprot.writeString(self.device)
      oprot.writeFieldEnd()
    if self.birthRecord is not None:
      oprot.writeFieldBegin('birthRecord', TType.I32, 11)
      oprot.writeI32(self.birthRecord)
      oprot.writeFieldEnd()
    if self.age is not None:
      oprot.writeFieldBegin('age', TType.I32, 12)
      oprot.writeI32(self.age)
      oprot.writeFieldEnd()
    if self.sex is not None:
      oprot.writeFieldBegin('sex', TType.STRING, 13)
      oprot.writeString(self.sex)
      oprot.writeFieldEnd()
    if self.shoppingAbility is not None:
      oprot.writeFieldBegin('shoppingAbility', TType.I32, 14)
      oprot.writeI32(self.shoppingAbility)
      oprot.writeFieldEnd()
    if self.tagFitSex is not None:
      oprot.writeFieldBegin('tagFitSex', TType.LIST, 15)
      oprot.writeListBegin(TType.STRING, len(self.tagFitSex))
      for iter54 in self.tagFitSex:
        oprot.writeString(iter54)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.tagFitAge is not None:
      oprot.writeFieldBegin('tagFitAge', TType.LIST, 16)
      oprot.writeListBegin(TType.LIST, len(self.tagFitAge))
      for iter55 in self.tagFitAge:
        oprot.writeListBegin(TType.I32, len(iter55))
        for iter56 in iter55:
          oprot.writeI32(iter56)
        oprot.writeListEnd()
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.tagFitScenario is not None:
      oprot.writeFieldBegin('tagFitScenario', TType.LIST, 17)
      oprot.writeListBegin(TType.STRING, len(self.tagFitScenario))
      for iter57 in self.tagFitScenario:
        oprot.writeString(iter57)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.tagFitMaterial is not None:
      oprot.writeFieldBegin('tagFitMaterial', TType.LIST, 18)
      oprot.writeListBegin(TType.STRING, len(self.tagFitMaterial))
      for iter58 in self.tagFitMaterial:
        oprot.writeString(iter58)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.tagFitDesignStyle is not None:
      oprot.writeFieldBegin('tagFitDesignStyle', TType.LIST, 19)
      oprot.writeListBegin(TType.STRING, len(self.tagFitDesignStyle))
      for iter59 in self.tagFitDesignStyle:
        oprot.writeString(iter59)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.tagFitTarget is not None:
      oprot.writeFieldBegin('tagFitTarget', TType.LIST, 20)
      oprot.writeListBegin(TType.STRING, len(self.tagFitTarget))
      for iter60 in self.tagFitTarget:
        oprot.writeString(iter60)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.tagFitPackage is not None:
      oprot.writeFieldBegin('tagFitPackage', TType.LIST, 21)
      oprot.writeListBegin(TType.STRING, len(self.tagFitPackage))
      for iter61 in self.tagFitPackage:
        oprot.writeString(iter61)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.tagList is not None:
      oprot.writeFieldBegin('tagList', TType.LIST, 22)
      oprot.writeListBegin(TType.STRING, len(self.tagList))
      for iter62 in self.tagList:
        oprot.writeString(iter62)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.haveMate is not None:
      oprot.writeFieldBegin('haveMate', TType.I32, 23)
      oprot.writeI32(self.haveMate)
      oprot.writeFieldEnd()
    if self.haveChild is not None:
      oprot.writeFieldBegin('haveChild', TType.I32, 24)
      oprot.writeI32(self.haveChild)
      oprot.writeFieldEnd()
    if self.testServer is not None:
      oprot.writeFieldBegin('testServer', TType.I32, 25)
      oprot.writeI32(self.testServer)
      oprot.writeFieldEnd()
    if self.updateTime is not None:
      oprot.writeFieldBegin('updateTime', TType.I64, 26)
      oprot.writeI64(self.updateTime)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.id is None:
      raise TProtocol.TProtocolException(message='Required field id is unset!')
    if self.userName is None:
      raise TProtocol.TProtocolException(message='Required field userName is unset!')
    if self.registerTime is None:
      raise TProtocol.TProtocolException(message='Required field registerTime is unset!')
    if self.birthday is None:
      raise TProtocol.TProtocolException(message='Required field birthday is unset!')
    if self.phone is None:
      raise TProtocol.TProtocolException(message='Required field phone is unset!')
    if self.email is None:
      raise TProtocol.TProtocolException(message='Required field email is unset!')
    if self.weixin is None:
      raise TProtocol.TProtocolException(message='Required field weixin is unset!')
    if self.weibo is None:
      raise TProtocol.TProtocolException(message='Required field weibo is unset!')
    if self.constellation is None:
      raise TProtocol.TProtocolException(message='Required field constellation is unset!')
    if self.device is None:
      raise TProtocol.TProtocolException(message='Required field device is unset!')
    if self.birthRecord is None:
      raise TProtocol.TProtocolException(message='Required field birthRecord is unset!')
    if self.age is None:
      raise TProtocol.TProtocolException(message='Required field age is unset!')
    if self.sex is None:
      raise TProtocol.TProtocolException(message='Required field sex is unset!')
    if self.shoppingAbility is None:
      raise TProtocol.TProtocolException(message='Required field shoppingAbility is unset!')
    if self.tagFitSex is None:
      raise TProtocol.TProtocolException(message='Required field tagFitSex is unset!')
    if self.tagFitAge is None:
      raise TProtocol.TProtocolException(message='Required field tagFitAge is unset!')
    if self.tagFitScenario is None:
      raise TProtocol.TProtocolException(message='Required field tagFitScenario is unset!')
    if self.tagFitMaterial is None:
      raise TProtocol.TProtocolException(message='Required field tagFitMaterial is unset!')
    if self.tagFitDesignStyle is None:
      raise TProtocol.TProtocolException(message='Required field tagFitDesignStyle is unset!')
    if self.tagFitTarget is None:
      raise TProtocol.TProtocolException(message='Required field tagFitTarget is unset!')
    if self.tagFitPackage is None:
      raise TProtocol.TProtocolException(message='Required field tagFitPackage is unset!')
    if self.tagList is None:
      raise TProtocol.TProtocolException(message='Required field tagList is unset!')
    if self.haveMate is None:
      raise TProtocol.TProtocolException(message='Required field haveMate is unset!')
    if self.haveChild is None:
      raise TProtocol.TProtocolException(message='Required field haveChild is unset!')
    if self.testServer is None:
      raise TProtocol.TProtocolException(message='Required field testServer is unset!')
    if self.updateTime is None:
      raise TProtocol.TProtocolException(message='Required field updateTime is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.userName)
    value = (value * 31) ^ hash(self.registerTime)
    value = (value * 31) ^ hash(self.birthday)
    value = (value * 31) ^ hash(self.phone)
    value = (value * 31) ^ hash(self.email)
    value = (value * 31) ^ hash(self.weixin)
    value = (value * 31) ^ hash(self.weibo)
    value = (value * 31) ^ hash(self.constellation)
    value = (value * 31) ^ hash(self.device)
    value = (value * 31) ^ hash(self.birthRecord)
    value = (value * 31) ^ hash(self.age)
    value = (value * 31) ^ hash(self.sex)
    value = (value * 31) ^ hash(self.shoppingAbility)
    value = (value * 31) ^ hash(self.tagFitSex)
    value = (value * 31) ^ hash(self.tagFitAge)
    value = (value * 31) ^ hash(self.tagFitScenario)
    value = (value * 31) ^ hash(self.tagFitMaterial)
    value = (value * 31) ^ hash(self.tagFitDesignStyle)
    value = (value * 31) ^ hash(self.tagFitTarget)
    value = (value * 31) ^ hash(self.tagFitPackage)
    value = (value * 31) ^ hash(self.tagList)
    value = (value * 31) ^ hash(self.haveMate)
    value = (value * 31) ^ hash(self.haveChild)
    value = (value * 31) ^ hash(self.testServer)
    value = (value * 31) ^ hash(self.updateTime)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserBehaviorT:
  """
  Attributes:
   - id
   - recent30DayViewList
   - recent30DayViewListCount
   - recent30DayViewListTime
   - recent30DayViewTotalCount
   - recent30DayActiveViewTime
   - recent30DayActiveViewTimeRange
   - recent30DayQueryList
   - recent30DayQueryListTime
   - firstBuy
   - totalBuyCount
   - totalBuyFee
   - minOrderFee
   - maxOrderFee
   - recent30DayBuyTotalCount
   - recent30DayBuyTotalFee
   - recent30DayBuyMeanFee
   - recent30DayBuyList
   - recent30DayBuyListCount
   - recent30DayBuyListTime
   - recent30DayBuyCategory
   - recent30DayBuyCategoryCount
   - recent30DayBuyBrand
   - recent30DayBuyBrandCount
   - recent90DayComplainCount
   - recent90DayRefuseCount
   - recent90DayRefuseRate
   - recent90DayRefundCount
   - recent90DayRefundRate
   - updateTime
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'id', None, None, ), # 1
    (2, TType.LIST, 'recent30DayViewList', (TType.STRING,None), None, ), # 2
    (3, TType.LIST, 'recent30DayViewListCount', (TType.I32,None), None, ), # 3
    (4, TType.LIST, 'recent30DayViewListTime', (TType.STRING,None), None, ), # 4
    (5, TType.I32, 'recent30DayViewTotalCount', None, None, ), # 5
    (6, TType.I32, 'recent30DayActiveViewTime', None, None, ), # 6
    (7, TType.STRING, 'recent30DayActiveViewTimeRange', None, None, ), # 7
    (8, TType.LIST, 'recent30DayQueryList', (TType.STRING,None), None, ), # 8
    (9, TType.LIST, 'recent30DayQueryListTime', (TType.STRING,None), None, ), # 9
    (10, TType.STRING, 'firstBuy', None, None, ), # 10
    (11, TType.I32, 'totalBuyCount', None, None, ), # 11
    (12, TType.DOUBLE, 'totalBuyFee', None, None, ), # 12
    (13, TType.DOUBLE, 'minOrderFee', None, None, ), # 13
    (14, TType.DOUBLE, 'maxOrderFee', None, None, ), # 14
    (15, TType.I32, 'recent30DayBuyTotalCount', None, None, ), # 15
    (16, TType.DOUBLE, 'recent30DayBuyTotalFee', None, None, ), # 16
    (17, TType.DOUBLE, 'recent30DayBuyMeanFee', None, None, ), # 17
    (18, TType.LIST, 'recent30DayBuyList', (TType.STRING,None), None, ), # 18
    (19, TType.LIST, 'recent30DayBuyListCount', (TType.I32,None), None, ), # 19
    (20, TType.LIST, 'recent30DayBuyListTime', (TType.STRING,None), None, ), # 20
    (21, TType.LIST, 'recent30DayBuyCategory', (TType.LIST,(TType.STRING,None)), None, ), # 21
    (22, TType.LIST, 'recent30DayBuyCategoryCount', (TType.I32,None), None, ), # 22
    (23, TType.LIST, 'recent30DayBuyBrand', (TType.STRING,None), None, ), # 23
    (24, TType.LIST, 'recent30DayBuyBrandCount', (TType.I32,None), None, ), # 24
    (25, TType.I32, 'recent90DayComplainCount', None, None, ), # 25
    (26, TType.I32, 'recent90DayRefuseCount', None, None, ), # 26
    (27, TType.DOUBLE, 'recent90DayRefuseRate', None, None, ), # 27
    (28, TType.I32, 'recent90DayRefundCount', None, None, ), # 28
    (29, TType.DOUBLE, 'recent90DayRefundRate', None, None, ), # 29
    (30, TType.I64, 'updateTime', None, None, ), # 30
  )

  def __init__(self, id=None, recent30DayViewList=None, recent30DayViewListCount=None, recent30DayViewListTime=None, recent30DayViewTotalCount=None, recent30DayActiveViewTime=None, recent30DayActiveViewTimeRange=None, recent30DayQueryList=None, recent30DayQueryListTime=None, firstBuy=None, totalBuyCount=None, totalBuyFee=None, minOrderFee=None, maxOrderFee=None, recent30DayBuyTotalCount=None, recent30DayBuyTotalFee=None, recent30DayBuyMeanFee=None, recent30DayBuyList=None, recent30DayBuyListCount=None, recent30DayBuyListTime=None, recent30DayBuyCategory=None, recent30DayBuyCategoryCount=None, recent30DayBuyBrand=None, recent30DayBuyBrandCount=None, recent90DayComplainCount=None, recent90DayRefuseCount=None, recent90DayRefuseRate=None, recent90DayRefundCount=None, recent90DayRefundRate=None, updateTime=None,):
    self.id = id
    self.recent30DayViewList = recent30DayViewList
    self.recent30DayViewListCount = recent30DayViewListCount
    self.recent30DayViewListTime = recent30DayViewListTime
    self.recent30DayViewTotalCount = recent30DayViewTotalCount
    self.recent30DayActiveViewTime = recent30DayActiveViewTime
    self.recent30DayActiveViewTimeRange = recent30DayActiveViewTimeRange
    self.recent30DayQueryList = recent30DayQueryList
    self.recent30DayQueryListTime = recent30DayQueryListTime
    self.firstBuy = firstBuy
    self.totalBuyCount = totalBuyCount
    self.totalBuyFee = totalBuyFee
    self.minOrderFee = minOrderFee
    self.maxOrderFee = maxOrderFee
    self.recent30DayBuyTotalCount = recent30DayBuyTotalCount
    self.recent30DayBuyTotalFee = recent30DayBuyTotalFee
    self.recent30DayBuyMeanFee = recent30DayBuyMeanFee
    self.recent30DayBuyList = recent30DayBuyList
    self.recent30DayBuyListCount = recent30DayBuyListCount
    self.recent30DayBuyListTime = recent30DayBuyListTime
    self.recent30DayBuyCategory = recent30DayBuyCategory
    self.recent30DayBuyCategoryCount = recent30DayBuyCategoryCount
    self.recent30DayBuyBrand = recent30DayBuyBrand
    self.recent30DayBuyBrandCount = recent30DayBuyBrandCount
    self.recent90DayComplainCount = recent90DayComplainCount
    self.recent90DayRefuseCount = recent90DayRefuseCount
    self.recent90DayRefuseRate = recent90DayRefuseRate
    self.recent90DayRefundCount = recent90DayRefundCount
    self.recent90DayRefundRate = recent90DayRefundRate
    self.updateTime = updateTime

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.recent30DayViewList = []
          (_etype66, _size63) = iprot.readListBegin()
          for _i67 in xrange(_size63):
            _elem68 = iprot.readString()
            self.recent30DayViewList.append(_elem68)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.recent30DayViewListCount = []
          (_etype72, _size69) = iprot.readListBegin()
          for _i73 in xrange(_size69):
            _elem74 = iprot.readI32()
            self.recent30DayViewListCount.append(_elem74)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.recent30DayViewListTime = []
          (_etype78, _size75) = iprot.readListBegin()
          for _i79 in xrange(_size75):
            _elem80 = iprot.readString()
            self.recent30DayViewListTime.append(_elem80)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.recent30DayViewTotalCount = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.recent30DayActiveViewTime = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.recent30DayActiveViewTimeRange = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.LIST:
          self.recent30DayQueryList = []
          (_etype84, _size81) = iprot.readListBegin()
          for _i85 in xrange(_size81):
            _elem86 = iprot.readString()
            self.recent30DayQueryList.append(_elem86)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.LIST:
          self.recent30DayQueryListTime = []
          (_etype90, _size87) = iprot.readListBegin()
          for _i91 in xrange(_size87):
            _elem92 = iprot.readString()
            self.recent30DayQueryListTime.append(_elem92)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.firstBuy = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.totalBuyCount = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.DOUBLE:
          self.totalBuyFee = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.DOUBLE:
          self.minOrderFee = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.DOUBLE:
          self.maxOrderFee = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I32:
          self.recent30DayBuyTotalCount = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.DOUBLE:
          self.recent30DayBuyTotalFee = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.DOUBLE:
          self.recent30DayBuyMeanFee = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.LIST:
          self.recent30DayBuyList = []
          (_etype96, _size93) = iprot.readListBegin()
          for _i97 in xrange(_size93):
            _elem98 = iprot.readString()
            self.recent30DayBuyList.append(_elem98)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.LIST:
          self.recent30DayBuyListCount = []
          (_etype102, _size99) = iprot.readListBegin()
          for _i103 in xrange(_size99):
            _elem104 = iprot.readI32()
            self.recent30DayBuyListCount.append(_elem104)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.LIST:
          self.recent30DayBuyListTime = []
          (_etype108, _size105) = iprot.readListBegin()
          for _i109 in xrange(_size105):
            _elem110 = iprot.readString()
            self.recent30DayBuyListTime.append(_elem110)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.LIST:
          self.recent30DayBuyCategory = []
          (_etype114, _size111) = iprot.readListBegin()
          for _i115 in xrange(_size111):
            _elem116 = []
            (_etype120, _size117) = iprot.readListBegin()
            for _i121 in xrange(_size117):
              _elem122 = iprot.readString()
              _elem116.append(_elem122)
            iprot.readListEnd()
            self.recent30DayBuyCategory.append(_elem116)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.LIST:
          self.recent30DayBuyCategoryCount = []
          (_etype126, _size123) = iprot.readListBegin()
          for _i127 in xrange(_size123):
            _elem128 = iprot.readI32()
            self.recent30DayBuyCategoryCount.append(_elem128)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.LIST:
          self.recent30DayBuyBrand = []
          (_etype132, _size129) = iprot.readListBegin()
          for _i133 in xrange(_size129):
            _elem134 = iprot.readString()
            self.recent30DayBuyBrand.append(_elem134)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.LIST:
          self.recent30DayBuyBrandCount = []
          (_etype138, _size135) = iprot.readListBegin()
          for _i139 in xrange(_size135):
            _elem140 = iprot.readI32()
            self.recent30DayBuyBrandCount.append(_elem140)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 25:
        if ftype == TType.I32:
          self.recent90DayComplainCount = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 26:
        if ftype == TType.I32:
          self.recent90DayRefuseCount = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 27:
        if ftype == TType.DOUBLE:
          self.recent90DayRefuseRate = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 28:
        if ftype == TType.I32:
          self.recent90DayRefundCount = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 29:
        if ftype == TType.DOUBLE:
          self.recent90DayRefundRate = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.I64:
          self.updateTime = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserBehaviorT')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 1)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    if self.recent30DayViewList is not None:
      oprot.writeFieldBegin('recent30DayViewList', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.recent30DayViewList))
      for iter141 in self.recent30DayViewList:
        oprot.writeString(iter141)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.recent30DayViewListCount is not None:
      oprot.writeFieldBegin('recent30DayViewListCount', TType.LIST, 3)
      oprot.writeListBegin(TType.I32, len(self.recent30DayViewListCount))
      for iter142 in self.recent30DayViewListCount:
        oprot.writeI32(iter142)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.recent30DayViewListTime is not None:
      oprot.writeFieldBegin('recent30DayViewListTime', TType.LIST, 4)
      oprot.writeListBegin(TType.STRING, len(self.recent30DayViewListTime))
      for iter143 in self.recent30DayViewListTime:
        oprot.writeString(iter143)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.recent30DayViewTotalCount is not None:
      oprot.writeFieldBegin('recent30DayViewTotalCount', TType.I32, 5)
      oprot.writeI32(self.recent30DayViewTotalCount)
      oprot.writeFieldEnd()
    if self.recent30DayActiveViewTime is not None:
      oprot.writeFieldBegin('recent30DayActiveViewTime', TType.I32, 6)
      oprot.writeI32(self.recent30DayActiveViewTime)
      oprot.writeFieldEnd()
    if self.recent30DayActiveViewTimeRange is not None:
      oprot.writeFieldBegin('recent30DayActiveViewTimeRange', TType.STRING, 7)
      oprot.writeString(self.recent30DayActiveViewTimeRange)
      oprot.writeFieldEnd()
    if self.recent30DayQueryList is not None:
      oprot.writeFieldBegin('recent30DayQueryList', TType.LIST, 8)
      oprot.writeListBegin(TType.STRING, len(self.recent30DayQueryList))
      for iter144 in self.recent30DayQueryList:
        oprot.writeString(iter144)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.recent30DayQueryListTime is not None:
      oprot.writeFieldBegin('recent30DayQueryListTime', TType.LIST, 9)
      oprot.writeListBegin(TType.STRING, len(self.recent30DayQueryListTime))
      for iter145 in self.recent30DayQueryListTime:
        oprot.writeString(iter145)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.firstBuy is not None:
      oprot.writeFieldBegin('firstBuy', TType.STRING, 10)
      oprot.writeString(self.firstBuy)
      oprot.writeFieldEnd()
    if self.totalBuyCount is not None:
      oprot.writeFieldBegin('totalBuyCount', TType.I32, 11)
      oprot.writeI32(self.totalBuyCount)
      oprot.writeFieldEnd()
    if self.totalBuyFee is not None:
      oprot.writeFieldBegin('totalBuyFee', TType.DOUBLE, 12)
      oprot.writeDouble(self.totalBuyFee)
      oprot.writeFieldEnd()
    if self.minOrderFee is not None:
      oprot.writeFieldBegin('minOrderFee', TType.DOUBLE, 13)
      oprot.writeDouble(self.minOrderFee)
      oprot.writeFieldEnd()
    if self.maxOrderFee is not None:
      oprot.writeFieldBegin('maxOrderFee', TType.DOUBLE, 14)
      oprot.writeDouble(self.maxOrderFee)
      oprot.writeFieldEnd()
    if self.recent30DayBuyTotalCount is not None:
      oprot.writeFieldBegin('recent30DayBuyTotalCount', TType.I32, 15)
      oprot.writeI32(self.recent30DayBuyTotalCount)
      oprot.writeFieldEnd()
    if self.recent30DayBuyTotalFee is not None:
      oprot.writeFieldBegin('recent30DayBuyTotalFee', TType.DOUBLE, 16)
      oprot.writeDouble(self.recent30DayBuyTotalFee)
      oprot.writeFieldEnd()
    if self.recent30DayBuyMeanFee is not None:
      oprot.writeFieldBegin('recent30DayBuyMeanFee', TType.DOUBLE, 17)
      oprot.writeDouble(self.recent30DayBuyMeanFee)
      oprot.writeFieldEnd()
    if self.recent30DayBuyList is not None:
      oprot.writeFieldBegin('recent30DayBuyList', TType.LIST, 18)
      oprot.writeListBegin(TType.STRING, len(self.recent30DayBuyList))
      for iter146 in self.recent30DayBuyList:
        oprot.writeString(iter146)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.recent30DayBuyListCount is not None:
      oprot.writeFieldBegin('recent30DayBuyListCount', TType.LIST, 19)
      oprot.writeListBegin(TType.I32, len(self.recent30DayBuyListCount))
      for iter147 in self.recent30DayBuyListCount:
        oprot.writeI32(iter147)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.recent30DayBuyListTime is not None:
      oprot.writeFieldBegin('recent30DayBuyListTime', TType.LIST, 20)
      oprot.writeListBegin(TType.STRING, len(self.recent30DayBuyListTime))
      for iter148 in self.recent30DayBuyListTime:
        oprot.writeString(iter148)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.recent30DayBuyCategory is not None:
      oprot.writeFieldBegin('recent30DayBuyCategory', TType.LIST, 21)
      oprot.writeListBegin(TType.LIST, len(self.recent30DayBuyCategory))
      for iter149 in self.recent30DayBuyCategory:
        oprot.writeListBegin(TType.STRING, len(iter149))
        for iter150 in iter149:
          oprot.writeString(iter150)
        oprot.writeListEnd()
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.recent30DayBuyCategoryCount is not None:
      oprot.writeFieldBegin('recent30DayBuyCategoryCount', TType.LIST, 22)
      oprot.writeListBegin(TType.I32, len(self.recent30DayBuyCategoryCount))
      for iter151 in self.recent30DayBuyCategoryCount:
        oprot.writeI32(iter151)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.recent30DayBuyBrand is not None:
      oprot.writeFieldBegin('recent30DayBuyBrand', TType.LIST, 23)
      oprot.writeListBegin(TType.STRING, len(self.recent30DayBuyBrand))
      for iter152 in self.recent30DayBuyBrand:
        oprot.writeString(iter152)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.recent30DayBuyBrandCount is not None:
      oprot.writeFieldBegin('recent30DayBuyBrandCount', TType.LIST, 24)
      oprot.writeListBegin(TType.I32, len(self.recent30DayBuyBrandCount))
      for iter153 in self.recent30DayBuyBrandCount:
        oprot.writeI32(iter153)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.recent90DayComplainCount is not None:
      oprot.writeFieldBegin('recent90DayComplainCount', TType.I32, 25)
      oprot.writeI32(self.recent90DayComplainCount)
      oprot.writeFieldEnd()
    if self.recent90DayRefuseCount is not None:
      oprot.writeFieldBegin('recent90DayRefuseCount', TType.I32, 26)
      oprot.writeI32(self.recent90DayRefuseCount)
      oprot.writeFieldEnd()
    if self.recent90DayRefuseRate is not None:
      oprot.writeFieldBegin('recent90DayRefuseRate', TType.DOUBLE, 27)
      oprot.writeDouble(self.recent90DayRefuseRate)
      oprot.writeFieldEnd()
    if self.recent90DayRefundCount is not None:
      oprot.writeFieldBegin('recent90DayRefundCount', TType.I32, 28)
      oprot.writeI32(self.recent90DayRefundCount)
      oprot.writeFieldEnd()
    if self.recent90DayRefundRate is not None:
      oprot.writeFieldBegin('recent90DayRefundRate', TType.DOUBLE, 29)
      oprot.writeDouble(self.recent90DayRefundRate)
      oprot.writeFieldEnd()
    if self.updateTime is not None:
      oprot.writeFieldBegin('updateTime', TType.I64, 30)
      oprot.writeI64(self.updateTime)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.id is None:
      raise TProtocol.TProtocolException(message='Required field id is unset!')
    if self.recent30DayViewList is None:
      raise TProtocol.TProtocolException(message='Required field recent30DayViewList is unset!')
    if self.recent30DayViewListCount is None:
      raise TProtocol.TProtocolException(message='Required field recent30DayViewListCount is unset!')
    if self.recent30DayViewListTime is None:
      raise TProtocol.TProtocolException(message='Required field recent30DayViewListTime is unset!')
    if self.recent30DayViewTotalCount is None:
      raise TProtocol.TProtocolException(message='Required field recent30DayViewTotalCount is unset!')
    if self.recent30DayActiveViewTime is None:
      raise TProtocol.TProtocolException(message='Required field recent30DayActiveViewTime is unset!')
    if self.recent30DayActiveViewTimeRange is None:
      raise TProtocol.TProtocolException(message='Required field recent30DayActiveViewTimeRange is unset!')
    if self.recent30DayQueryList is None:
      raise TProtocol.TProtocolException(message='Required field recent30DayQueryList is unset!')
    if self.recent30DayQueryListTime is None:
      raise TProtocol.TProtocolException(message='Required field recent30DayQueryListTime is unset!')
    if self.firstBuy is None:
      raise TProtocol.TProtocolException(message='Required field firstBuy is unset!')
    if self.totalBuyCount is None:
      raise TProtocol.TProtocolException(message='Required field totalBuyCount is unset!')
    if self.totalBuyFee is None:
      raise TProtocol.TProtocolException(message='Required field totalBuyFee is unset!')
    if self.minOrderFee is None:
      raise TProtocol.TProtocolException(message='Required field minOrderFee is unset!')
    if self.maxOrderFee is None:
      raise TProtocol.TProtocolException(message='Required field maxOrderFee is unset!')
    if self.recent30DayBuyTotalCount is None:
      raise TProtocol.TProtocolException(message='Required field recent30DayBuyTotalCount is unset!')
    if self.recent30DayBuyTotalFee is None:
      raise TProtocol.TProtocolException(message='Required field recent30DayBuyTotalFee is unset!')
    if self.recent30DayBuyMeanFee is None:
      raise TProtocol.TProtocolException(message='Required field recent30DayBuyMeanFee is unset!')
    if self.recent30DayBuyList is None:
      raise TProtocol.TProtocolException(message='Required field recent30DayBuyList is unset!')
    if self.recent30DayBuyListCount is None:
      raise TProtocol.TProtocolException(message='Required field recent30DayBuyListCount is unset!')
    if self.recent30DayBuyListTime is None:
      raise TProtocol.TProtocolException(message='Required field recent30DayBuyListTime is unset!')
    if self.recent30DayBuyCategory is None:
      raise TProtocol.TProtocolException(message='Required field recent30DayBuyCategory is unset!')
    if self.recent30DayBuyCategoryCount is None:
      raise TProtocol.TProtocolException(message='Required field recent30DayBuyCategoryCount is unset!')
    if self.recent30DayBuyBrand is None:
      raise TProtocol.TProtocolException(message='Required field recent30DayBuyBrand is unset!')
    if self.recent30DayBuyBrandCount is None:
      raise TProtocol.TProtocolException(message='Required field recent30DayBuyBrandCount is unset!')
    if self.recent90DayComplainCount is None:
      raise TProtocol.TProtocolException(message='Required field recent90DayComplainCount is unset!')
    if self.recent90DayRefuseCount is None:
      raise TProtocol.TProtocolException(message='Required field recent90DayRefuseCount is unset!')
    if self.recent90DayRefuseRate is None:
      raise TProtocol.TProtocolException(message='Required field recent90DayRefuseRate is unset!')
    if self.recent90DayRefundCount is None:
      raise TProtocol.TProtocolException(message='Required field recent90DayRefundCount is unset!')
    if self.recent90DayRefundRate is None:
      raise TProtocol.TProtocolException(message='Required field recent90DayRefundRate is unset!')
    if self.updateTime is None:
      raise TProtocol.TProtocolException(message='Required field updateTime is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.recent30DayViewList)
    value = (value * 31) ^ hash(self.recent30DayViewListCount)
    value = (value * 31) ^ hash(self.recent30DayViewListTime)
    value = (value * 31) ^ hash(self.recent30DayViewTotalCount)
    value = (value * 31) ^ hash(self.recent30DayActiveViewTime)
    value = (value * 31) ^ hash(self.recent30DayActiveViewTimeRange)
    value = (value * 31) ^ hash(self.recent30DayQueryList)
    value = (value * 31) ^ hash(self.recent30DayQueryListTime)
    value = (value * 31) ^ hash(self.firstBuy)
    value = (value * 31) ^ hash(self.totalBuyCount)
    value = (value * 31) ^ hash(self.totalBuyFee)
    value = (value * 31) ^ hash(self.minOrderFee)
    value = (value * 31) ^ hash(self.maxOrderFee)
    value = (value * 31) ^ hash(self.recent30DayBuyTotalCount)
    value = (value * 31) ^ hash(self.recent30DayBuyTotalFee)
    value = (value * 31) ^ hash(self.recent30DayBuyMeanFee)
    value = (value * 31) ^ hash(self.recent30DayBuyList)
    value = (value * 31) ^ hash(self.recent30DayBuyListCount)
    value = (value * 31) ^ hash(self.recent30DayBuyListTime)
    value = (value * 31) ^ hash(self.recent30DayBuyCategory)
    value = (value * 31) ^ hash(self.recent30DayBuyCategoryCount)
    value = (value * 31) ^ hash(self.recent30DayBuyBrand)
    value = (value * 31) ^ hash(self.recent30DayBuyBrandCount)
    value = (value * 31) ^ hash(self.recent90DayComplainCount)
    value = (value * 31) ^ hash(self.recent90DayRefuseCount)
    value = (value * 31) ^ hash(self.recent90DayRefuseRate)
    value = (value * 31) ^ hash(self.recent90DayRefundCount)
    value = (value * 31) ^ hash(self.recent90DayRefundRate)
    value = (value * 31) ^ hash(self.updateTime)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserContextT:
  """
  Attributes:
   - id
   - weather
   - favorList
   - shoppingCartList
   - recent30DayShoppingCartCount
   - recent30DayShoppingCartBrandList
   - recent30DayShoppingCartCategoryList
   - recent30DayBoughtCartListDate
   - shoppingCartLatestUpdate
   - recent30DayBuyTotalCount
   - recent30DayCollectionBrandList
   - recent30DayCollectionCategoryList
   - scoreAvail
   - scoreUsed
   - scoreTotal
   - couponAvail
   - couponUsed
   - couponTotal
   - couponAvailValue
   - couponUsedValue
   - couponTotalValue
   - shoppingCartLatestUpdateCount
   - recent30DayShoppingCartBoughtList
   - updateTime
   - location
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'id', None, None, ), # 1
    (2, TType.STRING, 'weather', None, None, ), # 2
    (3, TType.LIST, 'favorList', (TType.I64,None), None, ), # 3
    (4, TType.LIST, 'shoppingCartList', (TType.I64,None), None, ), # 4
    (5, TType.I32, 'recent30DayShoppingCartCount', None, None, ), # 5
    (6, TType.LIST, 'recent30DayShoppingCartBrandList', (TType.STRING,None), None, ), # 6
    (7, TType.LIST, 'recent30DayShoppingCartCategoryList', (TType.LIST,(TType.STRING,None)), None, ), # 7
    (8, TType.DOUBLE, 'recent30DayBoughtCartListDate', None, None, ), # 8
    (9, TType.I64, 'shoppingCartLatestUpdate', None, None, ), # 9
    (10, TType.I32, 'recent30DayBuyTotalCount', None, None, ), # 10
    (11, TType.LIST, 'recent30DayCollectionBrandList', (TType.STRING,None), None, ), # 11
    (12, TType.LIST, 'recent30DayCollectionCategoryList', (TType.LIST,(TType.STRING,None)), None, ), # 12
    (13, TType.I32, 'scoreAvail', None, None, ), # 13
    (14, TType.I32, 'scoreUsed', None, None, ), # 14
    (15, TType.I32, 'scoreTotal', None, None, ), # 15
    (16, TType.I32, 'couponAvail', None, None, ), # 16
    (17, TType.I32, 'couponUsed', None, None, ), # 17
    (18, TType.I32, 'couponTotal', None, None, ), # 18
    (19, TType.I32, 'couponAvailValue', None, None, ), # 19
    (20, TType.I32, 'couponUsedValue', None, None, ), # 20
    (21, TType.I32, 'couponTotalValue', None, None, ), # 21
    (22, TType.I32, 'shoppingCartLatestUpdateCount', None, None, ), # 22
    (23, TType.LIST, 'recent30DayShoppingCartBoughtList', (TType.I32,None), None, ), # 23
    (24, TType.I64, 'updateTime', None, None, ), # 24
    (25, TType.LIST, 'location', (TType.STRUCT,(LocationT, LocationT.thrift_spec)), None, ), # 25
  )

  def __init__(self, id=None, weather=None, favorList=None, shoppingCartList=None, recent30DayShoppingCartCount=None, recent30DayShoppingCartBrandList=None, recent30DayShoppingCartCategoryList=None, recent30DayBoughtCartListDate=None, shoppingCartLatestUpdate=None, recent30DayBuyTotalCount=None, recent30DayCollectionBrandList=None, recent30DayCollectionCategoryList=None, scoreAvail=None, scoreUsed=None, scoreTotal=None, couponAvail=None, couponUsed=None, couponTotal=None, couponAvailValue=None, couponUsedValue=None, couponTotalValue=None, shoppingCartLatestUpdateCount=None, recent30DayShoppingCartBoughtList=None, updateTime=None, location=None,):
    self.id = id
    self.weather = weather
    self.favorList = favorList
    self.shoppingCartList = shoppingCartList
    self.recent30DayShoppingCartCount = recent30DayShoppingCartCount
    self.recent30DayShoppingCartBrandList = recent30DayShoppingCartBrandList
    self.recent30DayShoppingCartCategoryList = recent30DayShoppingCartCategoryList
    self.recent30DayBoughtCartListDate = recent30DayBoughtCartListDate
    self.shoppingCartLatestUpdate = shoppingCartLatestUpdate
    self.recent30DayBuyTotalCount = recent30DayBuyTotalCount
    self.recent30DayCollectionBrandList = recent30DayCollectionBrandList
    self.recent30DayCollectionCategoryList = recent30DayCollectionCategoryList
    self.scoreAvail = scoreAvail
    self.scoreUsed = scoreUsed
    self.scoreTotal = scoreTotal
    self.couponAvail = couponAvail
    self.couponUsed = couponUsed
    self.couponTotal = couponTotal
    self.couponAvailValue = couponAvailValue
    self.couponUsedValue = couponUsedValue
    self.couponTotalValue = couponTotalValue
    self.shoppingCartLatestUpdateCount = shoppingCartLatestUpdateCount
    self.recent30DayShoppingCartBoughtList = recent30DayShoppingCartBoughtList
    self.updateTime = updateTime
    self.location = location

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.weather = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.favorList = []
          (_etype157, _size154) = iprot.readListBegin()
          for _i158 in xrange(_size154):
            _elem159 = iprot.readI64()
            self.favorList.append(_elem159)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.shoppingCartList = []
          (_etype163, _size160) = iprot.readListBegin()
          for _i164 in xrange(_size160):
            _elem165 = iprot.readI64()
            self.shoppingCartList.append(_elem165)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.recent30DayShoppingCartCount = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.recent30DayShoppingCartBrandList = []
          (_etype169, _size166) = iprot.readListBegin()
          for _i170 in xrange(_size166):
            _elem171 = iprot.readString()
            self.recent30DayShoppingCartBrandList.append(_elem171)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.recent30DayShoppingCartCategoryList = []
          (_etype175, _size172) = iprot.readListBegin()
          for _i176 in xrange(_size172):
            _elem177 = []
            (_etype181, _size178) = iprot.readListBegin()
            for _i182 in xrange(_size178):
              _elem183 = iprot.readString()
              _elem177.append(_elem183)
            iprot.readListEnd()
            self.recent30DayShoppingCartCategoryList.append(_elem177)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.DOUBLE:
          self.recent30DayBoughtCartListDate = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I64:
          self.shoppingCartLatestUpdate = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.recent30DayBuyTotalCount = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.LIST:
          self.recent30DayCollectionBrandList = []
          (_etype187, _size184) = iprot.readListBegin()
          for _i188 in xrange(_size184):
            _elem189 = iprot.readString()
            self.recent30DayCollectionBrandList.append(_elem189)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.LIST:
          self.recent30DayCollectionCategoryList = []
          (_etype193, _size190) = iprot.readListBegin()
          for _i194 in xrange(_size190):
            _elem195 = []
            (_etype199, _size196) = iprot.readListBegin()
            for _i200 in xrange(_size196):
              _elem201 = iprot.readString()
              _elem195.append(_elem201)
            iprot.readListEnd()
            self.recent30DayCollectionCategoryList.append(_elem195)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.scoreAvail = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I32:
          self.scoreUsed = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I32:
          self.scoreTotal = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.I32:
          self.couponAvail = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.I32:
          self.couponUsed = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.I32:
          self.couponTotal = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.I32:
          self.couponAvailValue = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I32:
          self.couponUsedValue = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.I32:
          self.couponTotalValue = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.I32:
          self.shoppingCartLatestUpdateCount = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.LIST:
          self.recent30DayShoppingCartBoughtList = []
          (_etype205, _size202) = iprot.readListBegin()
          for _i206 in xrange(_size202):
            _elem207 = iprot.readI32()
            self.recent30DayShoppingCartBoughtList.append(_elem207)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.I64:
          self.updateTime = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 25:
        if ftype == TType.LIST:
          self.location = []
          (_etype211, _size208) = iprot.readListBegin()
          for _i212 in xrange(_size208):
            _elem213 = LocationT()
            _elem213.read(iprot)
            self.location.append(_elem213)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserContextT')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 1)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    if self.weather is not None:
      oprot.writeFieldBegin('weather', TType.STRING, 2)
      oprot.writeString(self.weather)
      oprot.writeFieldEnd()
    if self.favorList is not None:
      oprot.writeFieldBegin('favorList', TType.LIST, 3)
      oprot.writeListBegin(TType.I64, len(self.favorList))
      for iter214 in self.favorList:
        oprot.writeI64(iter214)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.shoppingCartList is not None:
      oprot.writeFieldBegin('shoppingCartList', TType.LIST, 4)
      oprot.writeListBegin(TType.I64, len(self.shoppingCartList))
      for iter215 in self.shoppingCartList:
        oprot.writeI64(iter215)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.recent30DayShoppingCartCount is not None:
      oprot.writeFieldBegin('recent30DayShoppingCartCount', TType.I32, 5)
      oprot.writeI32(self.recent30DayShoppingCartCount)
      oprot.writeFieldEnd()
    if self.recent30DayShoppingCartBrandList is not None:
      oprot.writeFieldBegin('recent30DayShoppingCartBrandList', TType.LIST, 6)
      oprot.writeListBegin(TType.STRING, len(self.recent30DayShoppingCartBrandList))
      for iter216 in self.recent30DayShoppingCartBrandList:
        oprot.writeString(iter216)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.recent30DayShoppingCartCategoryList is not None:
      oprot.writeFieldBegin('recent30DayShoppingCartCategoryList', TType.LIST, 7)
      oprot.writeListBegin(TType.LIST, len(self.recent30DayShoppingCartCategoryList))
      for iter217 in self.recent30DayShoppingCartCategoryList:
        oprot.writeListBegin(TType.STRING, len(iter217))
        for iter218 in iter217:
          oprot.writeString(iter218)
        oprot.writeListEnd()
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.recent30DayBoughtCartListDate is not None:
      oprot.writeFieldBegin('recent30DayBoughtCartListDate', TType.DOUBLE, 8)
      oprot.writeDouble(self.recent30DayBoughtCartListDate)
      oprot.writeFieldEnd()
    if self.shoppingCartLatestUpdate is not None:
      oprot.writeFieldBegin('shoppingCartLatestUpdate', TType.I64, 9)
      oprot.writeI64(self.shoppingCartLatestUpdate)
      oprot.writeFieldEnd()
    if self.recent30DayBuyTotalCount is not None:
      oprot.writeFieldBegin('recent30DayBuyTotalCount', TType.I32, 10)
      oprot.writeI32(self.recent30DayBuyTotalCount)
      oprot.writeFieldEnd()
    if self.recent30DayCollectionBrandList is not None:
      oprot.writeFieldBegin('recent30DayCollectionBrandList', TType.LIST, 11)
      oprot.writeListBegin(TType.STRING, len(self.recent30DayCollectionBrandList))
      for iter219 in self.recent30DayCollectionBrandList:
        oprot.writeString(iter219)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.recent30DayCollectionCategoryList is not None:
      oprot.writeFieldBegin('recent30DayCollectionCategoryList', TType.LIST, 12)
      oprot.writeListBegin(TType.LIST, len(self.recent30DayCollectionCategoryList))
      for iter220 in self.recent30DayCollectionCategoryList:
        oprot.writeListBegin(TType.STRING, len(iter220))
        for iter221 in iter220:
          oprot.writeString(iter221)
        oprot.writeListEnd()
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.scoreAvail is not None:
      oprot.writeFieldBegin('scoreAvail', TType.I32, 13)
      oprot.writeI32(self.scoreAvail)
      oprot.writeFieldEnd()
    if self.scoreUsed is not None:
      oprot.writeFieldBegin('scoreUsed', TType.I32, 14)
      oprot.writeI32(self.scoreUsed)
      oprot.writeFieldEnd()
    if self.scoreTotal is not None:
      oprot.writeFieldBegin('scoreTotal', TType.I32, 15)
      oprot.writeI32(self.scoreTotal)
      oprot.writeFieldEnd()
    if self.couponAvail is not None:
      oprot.writeFieldBegin('couponAvail', TType.I32, 16)
      oprot.writeI32(self.couponAvail)
      oprot.writeFieldEnd()
    if self.couponUsed is not None:
      oprot.writeFieldBegin('couponUsed', TType.I32, 17)
      oprot.writeI32(self.couponUsed)
      oprot.writeFieldEnd()
    if self.couponTotal is not None:
      oprot.writeFieldBegin('couponTotal', TType.I32, 18)
      oprot.writeI32(self.couponTotal)
      oprot.writeFieldEnd()
    if self.couponAvailValue is not None:
      oprot.writeFieldBegin('couponAvailValue', TType.I32, 19)
      oprot.writeI32(self.couponAvailValue)
      oprot.writeFieldEnd()
    if self.couponUsedValue is not None:
      oprot.writeFieldBegin('couponUsedValue', TType.I32, 20)
      oprot.writeI32(self.couponUsedValue)
      oprot.writeFieldEnd()
    if self.couponTotalValue is not None:
      oprot.writeFieldBegin('couponTotalValue', TType.I32, 21)
      oprot.writeI32(self.couponTotalValue)
      oprot.writeFieldEnd()
    if self.shoppingCartLatestUpdateCount is not None:
      oprot.writeFieldBegin('shoppingCartLatestUpdateCount', TType.I32, 22)
      oprot.writeI32(self.shoppingCartLatestUpdateCount)
      oprot.writeFieldEnd()
    if self.recent30DayShoppingCartBoughtList is not None:
      oprot.writeFieldBegin('recent30DayShoppingCartBoughtList', TType.LIST, 23)
      oprot.writeListBegin(TType.I32, len(self.recent30DayShoppingCartBoughtList))
      for iter222 in self.recent30DayShoppingCartBoughtList:
        oprot.writeI32(iter222)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.updateTime is not None:
      oprot.writeFieldBegin('updateTime', TType.I64, 24)
      oprot.writeI64(self.updateTime)
      oprot.writeFieldEnd()
    if self.location is not None:
      oprot.writeFieldBegin('location', TType.LIST, 25)
      oprot.writeListBegin(TType.STRUCT, len(self.location))
      for iter223 in self.location:
        iter223.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.id is None:
      raise TProtocol.TProtocolException(message='Required field id is unset!')
    if self.weather is None:
      raise TProtocol.TProtocolException(message='Required field weather is unset!')
    if self.favorList is None:
      raise TProtocol.TProtocolException(message='Required field favorList is unset!')
    if self.shoppingCartList is None:
      raise TProtocol.TProtocolException(message='Required field shoppingCartList is unset!')
    if self.recent30DayShoppingCartCount is None:
      raise TProtocol.TProtocolException(message='Required field recent30DayShoppingCartCount is unset!')
    if self.recent30DayShoppingCartBrandList is None:
      raise TProtocol.TProtocolException(message='Required field recent30DayShoppingCartBrandList is unset!')
    if self.recent30DayShoppingCartCategoryList is None:
      raise TProtocol.TProtocolException(message='Required field recent30DayShoppingCartCategoryList is unset!')
    if self.recent30DayBoughtCartListDate is None:
      raise TProtocol.TProtocolException(message='Required field recent30DayBoughtCartListDate is unset!')
    if self.shoppingCartLatestUpdate is None:
      raise TProtocol.TProtocolException(message='Required field shoppingCartLatestUpdate is unset!')
    if self.recent30DayBuyTotalCount is None:
      raise TProtocol.TProtocolException(message='Required field recent30DayBuyTotalCount is unset!')
    if self.recent30DayCollectionBrandList is None:
      raise TProtocol.TProtocolException(message='Required field recent30DayCollectionBrandList is unset!')
    if self.recent30DayCollectionCategoryList is None:
      raise TProtocol.TProtocolException(message='Required field recent30DayCollectionCategoryList is unset!')
    if self.scoreAvail is None:
      raise TProtocol.TProtocolException(message='Required field scoreAvail is unset!')
    if self.scoreUsed is None:
      raise TProtocol.TProtocolException(message='Required field scoreUsed is unset!')
    if self.scoreTotal is None:
      raise TProtocol.TProtocolException(message='Required field scoreTotal is unset!')
    if self.couponAvail is None:
      raise TProtocol.TProtocolException(message='Required field couponAvail is unset!')
    if self.couponUsed is None:
      raise TProtocol.TProtocolException(message='Required field couponUsed is unset!')
    if self.couponTotal is None:
      raise TProtocol.TProtocolException(message='Required field couponTotal is unset!')
    if self.couponAvailValue is None:
      raise TProtocol.TProtocolException(message='Required field couponAvailValue is unset!')
    if self.couponUsedValue is None:
      raise TProtocol.TProtocolException(message='Required field couponUsedValue is unset!')
    if self.couponTotalValue is None:
      raise TProtocol.TProtocolException(message='Required field couponTotalValue is unset!')
    if self.shoppingCartLatestUpdateCount is None:
      raise TProtocol.TProtocolException(message='Required field shoppingCartLatestUpdateCount is unset!')
    if self.recent30DayShoppingCartBoughtList is None:
      raise TProtocol.TProtocolException(message='Required field recent30DayShoppingCartBoughtList is unset!')
    if self.updateTime is None:
      raise TProtocol.TProtocolException(message='Required field updateTime is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.weather)
    value = (value * 31) ^ hash(self.favorList)
    value = (value * 31) ^ hash(self.shoppingCartList)
    value = (value * 31) ^ hash(self.recent30DayShoppingCartCount)
    value = (value * 31) ^ hash(self.recent30DayShoppingCartBrandList)
    value = (value * 31) ^ hash(self.recent30DayShoppingCartCategoryList)
    value = (value * 31) ^ hash(self.recent30DayBoughtCartListDate)
    value = (value * 31) ^ hash(self.shoppingCartLatestUpdate)
    value = (value * 31) ^ hash(self.recent30DayBuyTotalCount)
    value = (value * 31) ^ hash(self.recent30DayCollectionBrandList)
    value = (value * 31) ^ hash(self.recent30DayCollectionCategoryList)
    value = (value * 31) ^ hash(self.scoreAvail)
    value = (value * 31) ^ hash(self.scoreUsed)
    value = (value * 31) ^ hash(self.scoreTotal)
    value = (value * 31) ^ hash(self.couponAvail)
    value = (value * 31) ^ hash(self.couponUsed)
    value = (value * 31) ^ hash(self.couponTotal)
    value = (value * 31) ^ hash(self.couponAvailValue)
    value = (value * 31) ^ hash(self.couponUsedValue)
    value = (value * 31) ^ hash(self.couponTotalValue)
    value = (value * 31) ^ hash(self.shoppingCartLatestUpdateCount)
    value = (value * 31) ^ hash(self.recent30DayShoppingCartBoughtList)
    value = (value * 31) ^ hash(self.updateTime)
    value = (value * 31) ^ hash(self.location)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GoodPortraitT:
  """
  Attributes:
   - id
   - name
   - meanPrice
   - location
   - score
   - heat
   - availableOn
   - categoryName
   - enable
   - brandWebsite
   - brandName
   - brandPhone
   - description
   - tagFitAge
   - tagFitSex
   - tagFitScenario
   - tagFitTarget
   - tagDesignStyle
   - tagMaterial
   - tagPackQuality
   - tagList
   - newGood
   - hotGood
   - recent7DaySoldCount
   - recent7DayViewCount
   - recent7DayAddToCartCount
   - refuseCount
   - refuseRate
   - promotionSense
   - expressSpeed
   - discount
   - updateTime
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'id', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.DOUBLE, 'meanPrice', None, None, ), # 3
    (4, TType.LIST, 'location', (TType.STRUCT,(LocationT, LocationT.thrift_spec)), None, ), # 4
    (5, TType.DOUBLE, 'score', None, None, ), # 5
    (6, TType.I16, 'heat', None, None, ), # 6
    (7, TType.I64, 'availableOn', None, None, ), # 7
    (8, TType.LIST, 'categoryName', (TType.STRING,None), None, ), # 8
    (9, TType.I16, 'enable', None, None, ), # 9
    (10, TType.STRING, 'brandWebsite', None, None, ), # 10
    (11, TType.STRING, 'brandName', None, None, ), # 11
    (12, TType.STRING, 'brandPhone', None, None, ), # 12
    (13, TType.STRING, 'description', None, None, ), # 13
    (14, TType.LIST, 'tagFitAge', (TType.LIST,(TType.I32,None)), None, ), # 14
    (15, TType.LIST, 'tagFitSex', (TType.STRING,None), None, ), # 15
    (16, TType.LIST, 'tagFitScenario', (TType.STRING,None), None, ), # 16
    (17, TType.LIST, 'tagFitTarget', (TType.STRING,None), None, ), # 17
    (18, TType.LIST, 'tagDesignStyle', (TType.STRING,None), None, ), # 18
    (19, TType.LIST, 'tagMaterial', (TType.STRING,None), None, ), # 19
    (20, TType.LIST, 'tagPackQuality', (TType.STRING,None), None, ), # 20
    (21, TType.LIST, 'tagList', (TType.STRING,None), None, ), # 21
    (22, TType.DOUBLE, 'newGood', None, None, ), # 22
    (23, TType.DOUBLE, 'hotGood', None, None, ), # 23
    (24, TType.LIST, 'recent7DaySoldCount', (TType.I32,None), None, ), # 24
    (25, TType.LIST, 'recent7DayViewCount', (TType.I32,None), None, ), # 25
    (26, TType.I32, 'recent7DayAddToCartCount', None, None, ), # 26
    (27, TType.I32, 'refuseCount', None, None, ), # 27
    (28, TType.DOUBLE, 'refuseRate', None, None, ), # 28
    (29, TType.DOUBLE, 'promotionSense', None, None, ), # 29
    (30, TType.I32, 'expressSpeed', None, None, ), # 30
    (31, TType.DOUBLE, 'discount', None, None, ), # 31
    (32, TType.I64, 'updateTime', None, None, ), # 32
  )

  def __init__(self, id=None, name=None, meanPrice=None, location=None, score=None, heat=None, availableOn=None, categoryName=None, enable=None, brandWebsite=None, brandName=None, brandPhone=None, description=None, tagFitAge=None, tagFitSex=None, tagFitScenario=None, tagFitTarget=None, tagDesignStyle=None, tagMaterial=None, tagPackQuality=None, tagList=None, newGood=None, hotGood=None, recent7DaySoldCount=None, recent7DayViewCount=None, recent7DayAddToCartCount=None, refuseCount=None, refuseRate=None, promotionSense=None, expressSpeed=None, discount=None, updateTime=None,):
    self.id = id
    self.name = name
    self.meanPrice = meanPrice
    self.location = location
    self.score = score
    self.heat = heat
    self.availableOn = availableOn
    self.categoryName = categoryName
    self.enable = enable
    self.brandWebsite = brandWebsite
    self.brandName = brandName
    self.brandPhone = brandPhone
    self.description = description
    self.tagFitAge = tagFitAge
    self.tagFitSex = tagFitSex
    self.tagFitScenario = tagFitScenario
    self.tagFitTarget = tagFitTarget
    self.tagDesignStyle = tagDesignStyle
    self.tagMaterial = tagMaterial
    self.tagPackQuality = tagPackQuality
    self.tagList = tagList
    self.newGood = newGood
    self.hotGood = hotGood
    self.recent7DaySoldCount = recent7DaySoldCount
    self.recent7DayViewCount = recent7DayViewCount
    self.recent7DayAddToCartCount = recent7DayAddToCartCount
    self.refuseCount = refuseCount
    self.refuseRate = refuseRate
    self.promotionSense = promotionSense
    self.expressSpeed = expressSpeed
    self.discount = discount
    self.updateTime = updateTime

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.meanPrice = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.location = []
          (_etype227, _size224) = iprot.readListBegin()
          for _i228 in xrange(_size224):
            _elem229 = LocationT()
            _elem229.read(iprot)
            self.location.append(_elem229)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.score = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I16:
          self.heat = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.availableOn = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.LIST:
          self.categoryName = []
          (_etype233, _size230) = iprot.readListBegin()
          for _i234 in xrange(_size230):
            _elem235 = iprot.readString()
            self.categoryName.append(_elem235)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I16:
          self.enable = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.brandWebsite = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.brandName = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.brandPhone = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.description = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.LIST:
          self.tagFitAge = []
          (_etype239, _size236) = iprot.readListBegin()
          for _i240 in xrange(_size236):
            _elem241 = []
            (_etype245, _size242) = iprot.readListBegin()
            for _i246 in xrange(_size242):
              _elem247 = iprot.readI32()
              _elem241.append(_elem247)
            iprot.readListEnd()
            self.tagFitAge.append(_elem241)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.LIST:
          self.tagFitSex = []
          (_etype251, _size248) = iprot.readListBegin()
          for _i252 in xrange(_size248):
            _elem253 = iprot.readString()
            self.tagFitSex.append(_elem253)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.LIST:
          self.tagFitScenario = []
          (_etype257, _size254) = iprot.readListBegin()
          for _i258 in xrange(_size254):
            _elem259 = iprot.readString()
            self.tagFitScenario.append(_elem259)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.LIST:
          self.tagFitTarget = []
          (_etype263, _size260) = iprot.readListBegin()
          for _i264 in xrange(_size260):
            _elem265 = iprot.readString()
            self.tagFitTarget.append(_elem265)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.LIST:
          self.tagDesignStyle = []
          (_etype269, _size266) = iprot.readListBegin()
          for _i270 in xrange(_size266):
            _elem271 = iprot.readString()
            self.tagDesignStyle.append(_elem271)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.LIST:
          self.tagMaterial = []
          (_etype275, _size272) = iprot.readListBegin()
          for _i276 in xrange(_size272):
            _elem277 = iprot.readString()
            self.tagMaterial.append(_elem277)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.LIST:
          self.tagPackQuality = []
          (_etype281, _size278) = iprot.readListBegin()
          for _i282 in xrange(_size278):
            _elem283 = iprot.readString()
            self.tagPackQuality.append(_elem283)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.LIST:
          self.tagList = []
          (_etype287, _size284) = iprot.readListBegin()
          for _i288 in xrange(_size284):
            _elem289 = iprot.readString()
            self.tagList.append(_elem289)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.DOUBLE:
          self.newGood = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.DOUBLE:
          self.hotGood = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.LIST:
          self.recent7DaySoldCount = []
          (_etype293, _size290) = iprot.readListBegin()
          for _i294 in xrange(_size290):
            _elem295 = iprot.readI32()
            self.recent7DaySoldCount.append(_elem295)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 25:
        if ftype == TType.LIST:
          self.recent7DayViewCount = []
          (_etype299, _size296) = iprot.readListBegin()
          for _i300 in xrange(_size296):
            _elem301 = iprot.readI32()
            self.recent7DayViewCount.append(_elem301)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 26:
        if ftype == TType.I32:
          self.recent7DayAddToCartCount = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 27:
        if ftype == TType.I32:
          self.refuseCount = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 28:
        if ftype == TType.DOUBLE:
          self.refuseRate = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 29:
        if ftype == TType.DOUBLE:
          self.promotionSense = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.I32:
          self.expressSpeed = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 31:
        if ftype == TType.DOUBLE:
          self.discount = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 32:
        if ftype == TType.I64:
          self.updateTime = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GoodPortraitT')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 1)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.meanPrice is not None:
      oprot.writeFieldBegin('meanPrice', TType.DOUBLE, 3)
      oprot.writeDouble(self.meanPrice)
      oprot.writeFieldEnd()
    if self.location is not None:
      oprot.writeFieldBegin('location', TType.LIST, 4)
      oprot.writeListBegin(TType.STRUCT, len(self.location))
      for iter302 in self.location:
        iter302.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.score is not None:
      oprot.writeFieldBegin('score', TType.DOUBLE, 5)
      oprot.writeDouble(self.score)
      oprot.writeFieldEnd()
    if self.heat is not None:
      oprot.writeFieldBegin('heat', TType.I16, 6)
      oprot.writeI16(self.heat)
      oprot.writeFieldEnd()
    if self.availableOn is not None:
      oprot.writeFieldBegin('availableOn', TType.I64, 7)
      oprot.writeI64(self.availableOn)
      oprot.writeFieldEnd()
    if self.categoryName is not None:
      oprot.writeFieldBegin('categoryName', TType.LIST, 8)
      oprot.writeListBegin(TType.STRING, len(self.categoryName))
      for iter303 in self.categoryName:
        oprot.writeString(iter303)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.enable is not None:
      oprot.writeFieldBegin('enable', TType.I16, 9)
      oprot.writeI16(self.enable)
      oprot.writeFieldEnd()
    if self.brandWebsite is not None:
      oprot.writeFieldBegin('brandWebsite', TType.STRING, 10)
      oprot.writeString(self.brandWebsite)
      oprot.writeFieldEnd()
    if self.brandName is not None:
      oprot.writeFieldBegin('brandName', TType.STRING, 11)
      oprot.writeString(self.brandName)
      oprot.writeFieldEnd()
    if self.brandPhone is not None:
      oprot.writeFieldBegin('brandPhone', TType.STRING, 12)
      oprot.writeString(self.brandPhone)
      oprot.writeFieldEnd()
    if self.description is not None:
      oprot.writeFieldBegin('description', TType.STRING, 13)
      oprot.writeString(self.description)
      oprot.writeFieldEnd()
    if self.tagFitAge is not None:
      oprot.writeFieldBegin('tagFitAge', TType.LIST, 14)
      oprot.writeListBegin(TType.LIST, len(self.tagFitAge))
      for iter304 in self.tagFitAge:
        oprot.writeListBegin(TType.I32, len(iter304))
        for iter305 in iter304:
          oprot.writeI32(iter305)
        oprot.writeListEnd()
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.tagFitSex is not None:
      oprot.writeFieldBegin('tagFitSex', TType.LIST, 15)
      oprot.writeListBegin(TType.STRING, len(self.tagFitSex))
      for iter306 in self.tagFitSex:
        oprot.writeString(iter306)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.tagFitScenario is not None:
      oprot.writeFieldBegin('tagFitScenario', TType.LIST, 16)
      oprot.writeListBegin(TType.STRING, len(self.tagFitScenario))
      for iter307 in self.tagFitScenario:
        oprot.writeString(iter307)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.tagFitTarget is not None:
      oprot.writeFieldBegin('tagFitTarget', TType.LIST, 17)
      oprot.writeListBegin(TType.STRING, len(self.tagFitTarget))
      for iter308 in self.tagFitTarget:
        oprot.writeString(iter308)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.tagDesignStyle is not None:
      oprot.writeFieldBegin('tagDesignStyle', TType.LIST, 18)
      oprot.writeListBegin(TType.STRING, len(self.tagDesignStyle))
      for iter309 in self.tagDesignStyle:
        oprot.writeString(iter309)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.tagMaterial is not None:
      oprot.writeFieldBegin('tagMaterial', TType.LIST, 19)
      oprot.writeListBegin(TType.STRING, len(self.tagMaterial))
      for iter310 in self.tagMaterial:
        oprot.writeString(iter310)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.tagPackQuality is not None:
      oprot.writeFieldBegin('tagPackQuality', TType.LIST, 20)
      oprot.writeListBegin(TType.STRING, len(self.tagPackQuality))
      for iter311 in self.tagPackQuality:
        oprot.writeString(iter311)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.tagList is not None:
      oprot.writeFieldBegin('tagList', TType.LIST, 21)
      oprot.writeListBegin(TType.STRING, len(self.tagList))
      for iter312 in self.tagList:
        oprot.writeString(iter312)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.newGood is not None:
      oprot.writeFieldBegin('newGood', TType.DOUBLE, 22)
      oprot.writeDouble(self.newGood)
      oprot.writeFieldEnd()
    if self.hotGood is not None:
      oprot.writeFieldBegin('hotGood', TType.DOUBLE, 23)
      oprot.writeDouble(self.hotGood)
      oprot.writeFieldEnd()
    if self.recent7DaySoldCount is not None:
      oprot.writeFieldBegin('recent7DaySoldCount', TType.LIST, 24)
      oprot.writeListBegin(TType.I32, len(self.recent7DaySoldCount))
      for iter313 in self.recent7DaySoldCount:
        oprot.writeI32(iter313)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.recent7DayViewCount is not None:
      oprot.writeFieldBegin('recent7DayViewCount', TType.LIST, 25)
      oprot.writeListBegin(TType.I32, len(self.recent7DayViewCount))
      for iter314 in self.recent7DayViewCount:
        oprot.writeI32(iter314)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.recent7DayAddToCartCount is not None:
      oprot.writeFieldBegin('recent7DayAddToCartCount', TType.I32, 26)
      oprot.writeI32(self.recent7DayAddToCartCount)
      oprot.writeFieldEnd()
    if self.refuseCount is not None:
      oprot.writeFieldBegin('refuseCount', TType.I32, 27)
      oprot.writeI32(self.refuseCount)
      oprot.writeFieldEnd()
    if self.refuseRate is not None:
      oprot.writeFieldBegin('refuseRate', TType.DOUBLE, 28)
      oprot.writeDouble(self.refuseRate)
      oprot.writeFieldEnd()
    if self.promotionSense is not None:
      oprot.writeFieldBegin('promotionSense', TType.DOUBLE, 29)
      oprot.writeDouble(self.promotionSense)
      oprot.writeFieldEnd()
    if self.expressSpeed is not None:
      oprot.writeFieldBegin('expressSpeed', TType.I32, 30)
      oprot.writeI32(self.expressSpeed)
      oprot.writeFieldEnd()
    if self.discount is not None:
      oprot.writeFieldBegin('discount', TType.DOUBLE, 31)
      oprot.writeDouble(self.discount)
      oprot.writeFieldEnd()
    if self.updateTime is not None:
      oprot.writeFieldBegin('updateTime', TType.I64, 32)
      oprot.writeI64(self.updateTime)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.id is None:
      raise TProtocol.TProtocolException(message='Required field id is unset!')
    if self.name is None:
      raise TProtocol.TProtocolException(message='Required field name is unset!')
    if self.meanPrice is None:
      raise TProtocol.TProtocolException(message='Required field meanPrice is unset!')
    if self.score is None:
      raise TProtocol.TProtocolException(message='Required field score is unset!')
    if self.heat is None:
      raise TProtocol.TProtocolException(message='Required field heat is unset!')
    if self.availableOn is None:
      raise TProtocol.TProtocolException(message='Required field availableOn is unset!')
    if self.categoryName is None:
      raise TProtocol.TProtocolException(message='Required field categoryName is unset!')
    if self.enable is None:
      raise TProtocol.TProtocolException(message='Required field enable is unset!')
    if self.brandWebsite is None:
      raise TProtocol.TProtocolException(message='Required field brandWebsite is unset!')
    if self.brandName is None:
      raise TProtocol.TProtocolException(message='Required field brandName is unset!')
    if self.brandPhone is None:
      raise TProtocol.TProtocolException(message='Required field brandPhone is unset!')
    if self.description is None:
      raise TProtocol.TProtocolException(message='Required field description is unset!')
    if self.tagFitAge is None:
      raise TProtocol.TProtocolException(message='Required field tagFitAge is unset!')
    if self.tagFitSex is None:
      raise TProtocol.TProtocolException(message='Required field tagFitSex is unset!')
    if self.tagFitScenario is None:
      raise TProtocol.TProtocolException(message='Required field tagFitScenario is unset!')
    if self.tagFitTarget is None:
      raise TProtocol.TProtocolException(message='Required field tagFitTarget is unset!')
    if self.tagDesignStyle is None:
      raise TProtocol.TProtocolException(message='Required field tagDesignStyle is unset!')
    if self.tagMaterial is None:
      raise TProtocol.TProtocolException(message='Required field tagMaterial is unset!')
    if self.tagPackQuality is None:
      raise TProtocol.TProtocolException(message='Required field tagPackQuality is unset!')
    if self.tagList is None:
      raise TProtocol.TProtocolException(message='Required field tagList is unset!')
    if self.newGood is None:
      raise TProtocol.TProtocolException(message='Required field newGood is unset!')
    if self.hotGood is None:
      raise TProtocol.TProtocolException(message='Required field hotGood is unset!')
    if self.recent7DaySoldCount is None:
      raise TProtocol.TProtocolException(message='Required field recent7DaySoldCount is unset!')
    if self.recent7DayViewCount is None:
      raise TProtocol.TProtocolException(message='Required field recent7DayViewCount is unset!')
    if self.recent7DayAddToCartCount is None:
      raise TProtocol.TProtocolException(message='Required field recent7DayAddToCartCount is unset!')
    if self.refuseCount is None:
      raise TProtocol.TProtocolException(message='Required field refuseCount is unset!')
    if self.refuseRate is None:
      raise TProtocol.TProtocolException(message='Required field refuseRate is unset!')
    if self.promotionSense is None:
      raise TProtocol.TProtocolException(message='Required field promotionSense is unset!')
    if self.expressSpeed is None:
      raise TProtocol.TProtocolException(message='Required field expressSpeed is unset!')
    if self.discount is None:
      raise TProtocol.TProtocolException(message='Required field discount is unset!')
    if self.updateTime is None:
      raise TProtocol.TProtocolException(message='Required field updateTime is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.meanPrice)
    value = (value * 31) ^ hash(self.location)
    value = (value * 31) ^ hash(self.score)
    value = (value * 31) ^ hash(self.heat)
    value = (value * 31) ^ hash(self.availableOn)
    value = (value * 31) ^ hash(self.categoryName)
    value = (value * 31) ^ hash(self.enable)
    value = (value * 31) ^ hash(self.brandWebsite)
    value = (value * 31) ^ hash(self.brandName)
    value = (value * 31) ^ hash(self.brandPhone)
    value = (value * 31) ^ hash(self.description)
    value = (value * 31) ^ hash(self.tagFitAge)
    value = (value * 31) ^ hash(self.tagFitSex)
    value = (value * 31) ^ hash(self.tagFitScenario)
    value = (value * 31) ^ hash(self.tagFitTarget)
    value = (value * 31) ^ hash(self.tagDesignStyle)
    value = (value * 31) ^ hash(self.tagMaterial)
    value = (value * 31) ^ hash(self.tagPackQuality)
    value = (value * 31) ^ hash(self.tagList)
    value = (value * 31) ^ hash(self.newGood)
    value = (value * 31) ^ hash(self.hotGood)
    value = (value * 31) ^ hash(self.recent7DaySoldCount)
    value = (value * 31) ^ hash(self.recent7DayViewCount)
    value = (value * 31) ^ hash(self.recent7DayAddToCartCount)
    value = (value * 31) ^ hash(self.refuseCount)
    value = (value * 31) ^ hash(self.refuseRate)
    value = (value * 31) ^ hash(self.promotionSense)
    value = (value * 31) ^ hash(self.expressSpeed)
    value = (value * 31) ^ hash(self.discount)
    value = (value * 31) ^ hash(self.updateTime)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
